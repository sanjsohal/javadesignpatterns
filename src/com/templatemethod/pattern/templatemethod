The Template Method defines the steps of an algorithm and allows subclasses to provide the implementation for one or more steps.

Template Method Pattern-

The Template Method Pattern defines the skeleton of an algorithm in a method, deferring some steps to subclasses. Template Method lets subclasses
redefine certain steps of an algorithm without changing the algorithm's structure.
This pattern is all about creating a template for an algorithm. What's a template? It's just a method; more specifically, it's a method that defines
an algorithm as set of steps. One or more of these steps is defined to be abstract implemented by a subclass. This ensures the algorithm's structure
stays unchanged, while subclasses provide some part of the implementation.

We can also have concrete methods that do nothing by default; we call these "hooks." Subclasses are free to override these but don't have to. We're
going to see how these are useful.

The Hollywood Principle-
The Hollywood Principle says Don't call us, we'll call you.

The Hollywood Principle gives us a way to prevent "dependency rot." Dependency rot happens when you have high-level components depending on
low-level components depending on high-level components depending on sideways components depending on low-level components, and so-on. When rot
sets in, no one can easily understand the way a system is designed.

With the Hollywood Principle, we allow low-level components to hook themselves into a system, but the high-level components determine when they are
needed, and how. In other words, the high-level components give the low-level components a "don't call us, we'll call you" treatment.

Concrete applets make extensive use of hooks to supply their own behaviors. Because these methods are implemented as hooks, the applet isn't
required to implement them.